version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8.11-browsers
      # https://circleci.com/docs/2.0/circleci-images/
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run:
          name: Install AWS cli
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              sudo apt-get install python-dev python-pip
              sudo pip install awscli
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              sudo apt-get install python-dev python-pip
              sudo pip install awscli
            else
              echo 'not needed'
            fi

      # run tests!
      - run: npm test

      - run:
          name: Build
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              npm run prod
            else
              npm run stage
            fi
      - run:
          name: Upload to S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              aws s3 cp --recursive --exclude assets/* dist/ "s3://${PRODUCTION_BUCKET_NAME}" --acl public-read
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws s3 cp --recursive --exclude assets/* dist/ "s3://${STAGING_BUCKET_NAME}" --acl public-read
            else
              echo 'na'
            fi
      - run:
          name: Upload Assets to S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              aws s3 cp --recursive --cache-control "max-age=31536000" dist/assets "s3://${PRODUCTION_BUCKET_NAME}/assets" --acl public-read
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws s3 cp --recursive --cache-control "max-age=31536000" dist/assets "s3://${STAGING_BUCKET_NAME}/assets" --acl public-read
            else
              echo 'na'
            fi
      - run:
          name: Invalidate Cloudfront
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              aws cloudfront create-invalidation --distribution-id ${PRODUCTION_CLOUDFRONT_ID} --paths /index.html /admin.html /rebrand.html
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws cloudfront create-invalidation --distribution-id ${STAGING_CLOUDFRONT_ID} --paths "/*"
            else
              echo 'na'
            fi
      - run:
          name: Build testnet
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              npm run testnet
            fi
      - run:
          name: Upload to S3 testnet
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws s3 cp --recursive --exclude assets/* dist/ "s3://${TESTNET_BUCKET_NAME}" --acl public-read
            else
              echo 'na'
            fi
      - run:
          name: Upload Assets to S3 testnet
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws s3 cp --recursive --cache-control "max-age=31536000" dist/assets "s3://${TESTNET_BUCKET_NAME}/assets" --acl public-read
            else
              echo 'na'
            fi
      - run:
          name: Invalidate Cloudfront testnet
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws cloudfront create-invalidation --distribution-id ${TESTNET_CLOUDFRONT_ID} --paths "/*"
            else
              echo 'na'
            fi
